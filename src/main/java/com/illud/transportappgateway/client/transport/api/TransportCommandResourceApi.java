/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.transportappgateway.client.transport.api;

import com.illud.transportappgateway.client.transport.model.DefaultInfoRequest;
import com.illud.transportappgateway.client.transport.model.DriverInfo;
import com.illud.transportappgateway.client.transport.model.PaymentStatus;
import com.illud.transportappgateway.client.transport.model.RateAndReview;
import com.illud.transportappgateway.client.transport.model.RideStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-10-29T15:21:49.625+05:30[Asia/Calcutta]")

@Api(value = "TransportCommandResource", description = "the TransportCommandResource API")
public interface TransportCommandResourceApi {

    @ApiOperation(value = "collectRiderLocationDetails", nickname = "collectRiderLocationDetailsUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/collectRiderLocationDetails/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> collectRiderLocationDetailsUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "defaultInfoRequest" ,required=true )  @Valid @RequestBody DefaultInfoRequest defaultInfoRequest);


    @ApiOperation(value = "driverResponse", nickname = "driverResponseUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/driverResponse/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> driverResponseUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "driverInfo" ,required=true )  @Valid @RequestBody DriverInfo driverInfo);


    @ApiOperation(value = "initateWorkflow", nickname = "initateWorkflowUsingPOST", notes = "", response = String.class, tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/initiate",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<String> initateWorkflowUsingPOST();


    @ApiOperation(value = "payment", nickname = "paymentUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/payment/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> paymentUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "paymentStatus" ,required=true )  @Valid @RequestBody PaymentStatus paymentStatus);


    @ApiOperation(value = "rateAndReview", nickname = "rateAndReviewUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/rateAndReview/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> rateAndReviewUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "rateAndReview" ,required=true )  @Valid @RequestBody RateAndReview rateAndReview);


    @ApiOperation(value = "rideComplete", nickname = "rideCompleteUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/rideComplete/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> rideCompleteUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "rideComplete" ,required=true )  @Valid @RequestBody RideStatus rideStatus);


    @ApiOperation(value = "startRide", nickname = "startRideUsingPOST", notes = "", tags={ "transport-command-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/startRide/{taskId}",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<Void> startRideUsingPOST(@ApiParam(value = "taskId",required=true) @PathVariable("taskId") String taskId,@ApiParam(value = "startRide" ,required=true )  @Valid @RequestBody RideStatus rideStatus);

}
